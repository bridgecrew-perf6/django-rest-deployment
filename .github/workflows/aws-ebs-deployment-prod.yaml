# This workflow will depluy python-django app to Elastic beanstalk using cloud formation,

# WHAT TO DO ?
# 1. clone the repo (checkout)
# 2. create virtual environment
# 3. install dependencies
# 4. rum migrations
# 5. create a supruser
# 5. generate ststic files
# 5. create a zip file
# 6. create a s3 bucket & upload the zip file.
# 7. deploy with the help of cloudformation


name: Deploy to Amazon EBS (Prod)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_S3_BUCKET_NAME: django-app-bucket-umer2001
  APP_NAME: python-django
  APP_DESCRIPTION: this app is a simple REST api for movies
  AWS_CLOUDFORMATION_STACK_NAME: python-django
  SOLUTION_STACK: 64bit Amazon Linux 2 v3.3.13 running Python 3.7
  ZIP_FILE_NAME: ${{ github.event.repository.name }}-${{ github.sha }}.zip
  SSL_CERT_REF: arn:aws:acm:us-east-1:621815293864:certificate/d0ffe643-0f22-44c0-95ad-97789048a2b2
  DB_NAME: python-django-db
  DB_ENGINE: postgres
  DB_LICENCE_MODEL: postgresql-license
  DB_INSTANCE_SIZE: db.t2.small
  DB_CAPACITY: '5'
  DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  # DB_RENTENSION_POLICY: "Snapshot"
 

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: '3.7'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Creating python virtual rnvironment & installing dependencies
      run: python -m venv env && pip install -r requirements.txt

    - name: Genetrating ststic files (css,js, fonts)
      run: python manage.py collectstatic

    - name: Creating Archive for deployment
      run: zip -r ${{ env.ZIP_FILE_NAME }} .

    - name: Creating S3 bucket (if not created) & uploading the zip file
      run: ./.cloudformation/create-bucket.sh ${{env.ZIP_FILE_NAME}} ${{env.AWS_S3_BUCKET_NAME}}

    - name: Deploying the stack using cloudformation
      run: |
        aws cloudformation deploy --stack-name ${{ env.AWS_CLOUDFORMATION_STACK_NAME }} \
        --capabilities CAPABILITY_IAM \
        --template-file ./.cloudformation/aws-ebs-deploy-prod.yaml \
        --parameter-overrides "S3BucketName=${{env.AWS_S3_BUCKET_NAME}}" \
        "AppName=${{env.APP_NAME}}" \
        "AppDescription=${{env.APP_DESCRIPTION}}" \
        "DeploymentPackage=${{env.ZIP_FILE_NAME}}" \
        "SolutionStack=${{env.SOLUTION_STACK}}" \
        "SSLCertRef=${{env.SSL_CERT_REF}}" \
        "DBName=${{env.DB_NAME}}" \
        "DBEngine=${{env.DB_ENGINE}}" \
        "DBLicenseModel=${{env.DB_LICENCE_MODEL}}" \
        "DBInstanceSize=${{env.DB_INSTANCE_SIZE}}" \
        "DBCapacity=${{env.DB_CAPACITY}}" \
        "DBUserName=${{env.DB_USER_NAME}}" \
        "DBPassword=${{env.DB_PASSWORD}}" 

    - name: Getting result...
      run: |
        aws cloudformation describe-stacks --stack-name ${{ env.AWS_CLOUDFORMATION_STACK_NAME }} \
        --query "Stacks[0].Outputs"


    